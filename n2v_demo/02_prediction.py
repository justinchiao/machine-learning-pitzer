# -*- coding: utf-8 -*-
"""02_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13-tnm8YkDP4SlMWo0VZl39wftFQfOqFW

# Noise2Void - 2D Example for RGB Data

__Note:__ This notebook expects a trained model and will only work if you have executed the `01_training.ipynb` beforehand.
"""

# We import all our dependencies.
from memory_profiler import profile
from n2v.models import N2V
import numpy as np
from matplotlib import pyplot as plt
from matplotlib.image import imread, imsave
from csbdeep.io import save_tiff_imagej_compatible

"""## Load the Network"""
# @profile

# A previously trained model is loaded by creating a new N2V-object without providing a 'config'.
def main():
    model_name = 'n2v_2D'
    basedir = 'models'
    model = N2V(config=None, name=model_name, basedir=basedir)

    # In case you do not want to load the weights that lead to lowest validation loss during
    # training but the latest computed weights, you can execute the following line:

    # model.load_weights('weights_last.h5')

    """## Prediction
    Here we will simply use the same image as during training and denoise it using our network.
    """

    # We read the image we want to process and get rid of the Alpha channel.
    img = imread('data/longBeach.png')[...,:3]

    # Here we process the image.
    pred = model.predict(img, axes='YXC')

    """## Save Results"""

    from matplotlib.image import imsave
    imsave('pred_longBeach.png', np.clip(pred,0.0,1.0))

if __name__ == '__main__':
    main()