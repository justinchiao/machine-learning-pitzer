# -*- coding: utf-8 -*-
"""homework2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15w0n2xVm9XNH4qdxdxpa1TJooGgvTvQc

**Homework 2**

We begin with the usual imports.
"""

import numpy as np
import pandas as pd

"""Now load the iris dataset."""

iris=pd.read_csv("https://vincentarelbundock.github.io/Rdatasets/csv/datasets/iris.csv",index_col=0)
iris.head(5)

"""Define `data` to be a DataFrame containing the `Petal.Length` and `Petal.Width` of the flowers in the iris dataset. Define `target` to be a Pandas Series containing the `Species` column."""

data=iris[['Petal.Length','Petal.Width']]
data =data.rename(columns={'Petal.Length':'petal_length','Petal.Width':'petal_width'})
target= iris['Species']
data

"""Define a function `sq_distances` with inputs `data` (a DataFrame of known Petal Lengths and Petal Widths), `length` and `width` (the Petal Length and Petal Width of an unknown flower). The function should return a Pandas series of squared distances from the unknown point to each point in `data`. Use Pandas and/or Numpy operations. DO NOT USE A FOR LOOP."""

def sq_distances(data,length,width):
  #Your code here
  data['sq_distance']=((data.petal_length-length)**2)+((data.petal_width-width)**2)
  return data.sq_distance

sq_distances(data,1.4,0.2)

"""Define a function `SpeciesOfKNeighbors` that gives the Species of the k nearest neighbors from the point with given Petal Length and Petal Width to the points in `data`. (The list of species for each point in `data` is contained in the Series `target`.)"""

def SpeciesOfNeighbors(data,target,length,width,k):
  #Your code here
  sq_dist_row=sq_distances(data,length,width).sort_values(ascending=True).head(k).index
  return target[sq_dist_row]

test=SpeciesOfNeighbors(data,target,1.4,0.2,10)
test

"""Create a function `prediction` that takes a Pandas Series of labels, and returns the label that appears the most often. (Hint: The Pandas Series function `value_counts()` will be useful here."""

def prediction(labels):
  #Your code here
  return labels.value_counts().sort_values(ascending=False).index[0]

prediction(test)

"""Create a function `KNN` which takes a DataFrame `data` of known Petal Lengths and Petal Widths, a Series `target` containing their species, a hyperparameter `k`, and the `length` and `width` of the petal of an unknown flower. Your function should return the most common species among the k nearest neighbors of the unknown flower."""

def KNN(data,target,length,width,k):
  #Your code here
  return prediction(SpeciesOfNeighbors(data,target,length,width,k))

"""Test your code here (it should return 'setosa'):"""

KNN(data,target,1.4,0.2,3)